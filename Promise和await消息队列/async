async 类似 new Promise
await 类似 then

原函数
    function fn(){
        return new Promise(resolve => {
            resolve(10)
        })
    }
异步async简化
    async function fn(){
        return 10
    }

另一个async的例子
    // 如果async声明的函数中没有写await，那么它里边就会依次执行
    /*
    这两个逻辑是一样的
    async function fn4(){
        console.log(1)
        console.log(2)
        console.log(3)
    }

    function fn5(){
        return new Promise(resolve => {
            console.log(1)
            console.log(2)
            console.log(3)
            resolve()
        })
    }

    */

async的特点
1、async创建的函数其返回值会自动封装到一个Promise中返回
2、async创建的函数中可以使用await关键字

await的简化
原函数
    async function fn2() {
        return 10
    }

    function fn3(num) {
        return num + 5
    }

    function fn4(num) {
        return num + 10
    }

    function fn5(num) {
        return num + 20
    }

    fn2()
        .then(fn3)
        .then(fn4)
        .then(fn5)
        .then(console.log)
        .catch(err => console.log("出错了"))

通过await简化
    async function fn6() {
        try {
            let result = await fn2()
            result = await fn3(result)
            result = await fn4(result)
            result = await fn5(result)
            console.log(result)
        } catch (e) {
            console.log("出错了")
        }

    }


await的执行顺序
async function fn4() {
    console.log(1)
    /*
        当我们使用await调用函数后，当前函数后边的所有代码
            会在当前函数执行完毕后，被放入到微任务队里中
    *///输出完2 以后下面的代码挂起 进入微任务队列
    await console.log(2)

    // await后边的所有代码，都会放入到微任务队列中执行
    console.log(3)
}

